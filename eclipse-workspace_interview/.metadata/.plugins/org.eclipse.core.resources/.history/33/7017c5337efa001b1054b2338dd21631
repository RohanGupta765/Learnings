package InterviewA;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.AfterTest;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import POMPages.MiroSignUpPOM;
import TestData.SourceDataprovider;
import Utilities.SourceClass;
import io.github.bonigarcia.wdm.WebDriverManager;
import junit.framework.Assert;

public class UsrRegistrationPosCases {
	WebDriver driver;
	String site = null;
	
	@BeforeTest
	public void setTestConfig()
	{
		try {
			String browserName = SourceClass.getpropertiesValues("browser");
//			site = SourceClass.getpropertiesValues("url");
			driver = SourceClass.LaunchBrowser(browserName,site);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			System.out.println("Initial Configuration Failure");
		}
	}
	
	@Test(dataProviderClass=SourceDataprovider.class, dataProvider="signup") 
	public void enterEmailDetails(String username, String password, String emailID) throws Exception
	{
		if(driver!=null)
		{	
		MiroSignUpPOM signup = new MiroSignUpPOM(driver);
		signup.getEmailTxtbox().sendKeys(emailID);
		Assert.assertTrue(false);
		}
		else
		{
			Assert.assertTrue(false);
		}
	}
	
	@Test
	public void enterPWDDetails() throws Exception
	{
		if(driver!=null)
		{
		MiroSignUpPOM signup = new MiroSignUpPOM(driver);
		signup.enterPassword("DummyPWD");
		Thread.sleep(2000);
		}
		else
		{
			Assert.assertTrue(false);
		}
	}
	@AfterTest
	public void closeBrowsers()
	{
		driver.quit();
	}

}
